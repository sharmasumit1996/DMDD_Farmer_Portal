---------------------------------------------------------------------------CREATE TABLE SCRIPTS------------------------------------------------------

CREATE DATABASE FARMER_PORTAL;
GO
--DROP DATABASE FARMER_PORTAL;
USE FARMER_PORTAL;
GO


CREATE TABLE ADDRESS
(
ADDRESS_ID INT IDENTITY(400,1) NOT NULL
,ADDRESS_DETAIL VARCHAR(255) NOT NULL
,CITY VARCHAR(100) NOT NULL
,STATE CHAR(2) NOT NULL
,POSTAL_CODE VARCHAR(5) NOT NULL
CONSTRAINT ADDRESS_ID_PK PRIMARY KEY (ADDRESS_ID)
,CONSTRAINT CHK_POSTAL CHECK (LEN(POSTAL_CODE) = 5)
);
GO

CREATE TABLE PERSONS
(
PERSON_ID INT IDENTITY(700,1) NOT NULL
,ADDRESS_ID INT NOT NULL
,PERSON_NAME VARCHAR(100) NOT NULL
,PERSON_TYPE VARCHAR(100) NOT NULL
,PHONE_NUMBER NUMERIC(10) NOT NULL
,USER_NAME VARCHAR(100) NOT NULL
,PASSWORD VARCHAR(100) NOT NULL
CONSTRAINT PERSON_ID_PK PRIMARY KEY (PERSON_ID)
,CONSTRAINT PERSONS_ADDRESS_ID_FK FOREIGN KEY (ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID)
,CONSTRAINT CHK_PHONE_NUMBER CHECK (LEN(PHONE_NUMBER) = 10 )
,CONSTRAINT CHK_PERSON_TYPE CHECK (PERSON_TYPE IN ('FARMER','CUSTOMER'))
);
GO

CREATE TABLE PRODUCT_TYPE (
PRODUCT_TYPE_ID INT IDENTITY(1000,1) NOT NULL
,PRODUCT_TYPE VARCHAR(30)
,FLOOR_PRICE INT  NOT NULL
,CEILING_PRICE INT NOT NULL
CONSTRAINT PRODUCT_TYPE_PK PRIMARY KEY (PRODUCT_TYPE_ID)
);

CREATE TABLE PRODUCT
(
PRODUCT_ID INT IDENTITY(900,1) NOT NULL
,PERSON_ID INT NOT NULL
,PRODUCT_NAME VARCHAR(100) NOT NULL
,PRODUCT_TYPE_ID INT NOT NULL
,PRODUCT_PRICE NUMERIC(20,2) NOT NULL
,FERTILIZER VARCHAR(100) NOT NULL
,PH_SCALE NUMERIC(2) NOT NULL
CONSTRAINT PRODUCT_ID_PK PRIMARY KEY (PRODUCT_ID)
,CONSTRAINT PRODUCT_PERSON_ID_FK FOREIGN KEY (PERSON_ID) REFERENCES PERSONS(PERSON_ID)
,CONSTRAINT PRODUCT_TYPE_ID_FK FOREIGN KEY (PRODUCT_TYPE_ID) REFERENCES PRODUCT_TYPE(PRODUCT_TYPE_ID)
,CONSTRAINT CHK_PH_SCALE CHECK (PH_SCALE BETWEEN 0 AND 14)
);
GO

CREATE TABLE FARMERS
(
PERSON_ID INT NOT NULL
,LAND_DETAILS VARCHAR(100) NOT NULL
CONSTRAINT FARMERS_PERSON_ID_FK FOREIGN KEY (PERSON_ID) REFERENCES PERSONS(PERSON_ID)
);
GO

CREATE TABLE CUSTOMERS
(
PERSON_ID INT NOT NULL
,CUSTOMER_TYPE VARCHAR(100) NOT NULL
CONSTRAINT CUSTOMERS_PERSON_ID_FK FOREIGN KEY (PERSON_ID) REFERENCES PERSONS(PERSON_ID)
,CONSTRAINT CHK_CUSTOMER_TYPE CHECK (CUSTOMER_TYPE IN ('RETAIL','GOVERNMENT','INDIVIDUAL'))
);
GO

CREATE TABLE BANK
(
BANK_ID INT IDENTITY(1,1) NOT NULL
,PERSON_ID INT NOT NULL
,BANK_NAME VARCHAR(100) NOT NULL
,ACCOUNT_NUMBER NUMERIC(20) NOT NULL
,BRANCH_NAME VARCHAR(100) NOT NULL
CONSTRAINT BANK_ID_PK PRIMARY KEY (BANK_ID)
CONSTRAINT BANK_PERSON_ID_FK FOREIGN KEY (PERSON_ID) REFERENCES PERSONS(PERSON_ID)
,CONSTRAINT CHK_ACCOUNT_NUMBER CHECK (LEN(ACCOUNT_NUMBER) BETWEEN 10 AND 12)
);
GO

CREATE TABLE [ORDER]
(
ORDER_ID INT IDENTITY(200,1) NOT NULL
,PERSON_ID INT NOT NULL
,TOTAL_QUANTITY NUMERIC(5,2) NOT NULL
,TOTAL_COST NUMERIC(20,2) NOT NULL
,ORDER_STATUS VARCHAR(100) NOT NULL
CONSTRAINT ORDER_ID_PK PRIMARY KEY (ORDER_ID)
,CONSTRAINT ORDER_PERSON_ID_FK FOREIGN KEY (PERSON_ID) REFERENCES PERSONS(PERSON_ID)
,CONSTRAINT ORDER_CHK_ORDER_STATUS CHECK (ORDER_STATUS IN ('SUCCESS','FAILED','IN-PROGRESS'))
);
GO

CREATE TABLE ORDER_AUDIT
(
ORDER_ID INT  NOT NULL
,PERSON_ID INT NOT NULL
,TOTAL_QUANTITY NUMERIC(5,2) NOT NULL
,TOTAL_COST NUMERIC(20,2) NOT NULL
,ORDER_STATUS VARCHAR(100) NOT NULL
,ORDER_UPDATE_DATE DATE
);
GO

CREATE TABLE ORDER_LINE
(
ORDER_LINE_ID INT IDENTITY(600,1) NOT NULL
,ORDER_ID INT NOT NULL
,PERSON_ID INT NOT NULL
,PRODUCT_ID INT NOT NULL
,COST NUMERIC(20,2) NOT NULL
,QUANTITY INT NOT NULL
,ORDER_DATE DATE  NOT NULL
CONSTRAINT ORDER_LINE_ID_PK PRIMARY KEY (ORDER_LINE_ID)
,CONSTRAINT ORDER_LINE_PERSON_ID_FK FOREIGN KEY (PERSON_ID) REFERENCES PERSONS(PERSON_ID)
,CONSTRAINT ORDER_LINE_ORDER_ID_FK FOREIGN KEY (ORDER_ID) REFERENCES [ORDER](ORDER_ID)
,CONSTRAINT ORDER_LINE_PRODUCT_ID_FK FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID)
);
GO

CREATE TABLE PAYMENT
(
PAYMENT_ID INT IDENTITY(800,1) NOT NULL
,ORDER_ID INT NOT NULL
,BANK_ID INT NOT NULL
,PAYMENT_DATE DATE NOT NULL
CONSTRAINT PAYMENT_ID_PK PRIMARY KEY (PAYMENT_ID)
,CONSTRAINT PAYMENT_ORDER_ID_FK FOREIGN KEY (ORDER_ID) REFERENCES [ORDER](ORDER_ID)
,CONSTRAINT PAYMENT_BANK_ID_FK FOREIGN KEY (BANK_ID) REFERENCES BANK(BANK_ID)
);
GO

CREATE TABLE INVOICE
(
INVOICE_ID INT IDENTITY(100,1) NOT NULL
,ORDER_ID INT NOT NULL
,INVOICE_AMOUNT NUMERIC(20,2) NOT NULL
,PAYMENT_STATUS VARCHAR(25) NOT NULL
CONSTRAINT INVOICE_ID_PK PRIMARY KEY (INVOICE_ID)
,CONSTRAINT INVOICE_ORDER_ID_FK FOREIGN KEY (ORDER_ID) REFERENCES [ORDER](ORDER_ID)
);

--DROP TABLE INVOICE;
GO

CREATE TABLE SHIPMENTS
(
SHIPMENT_ID INT IDENTITY(300,1) NOT NULL
,PERSON_ID INT NOT NULL
,ADDRESS_ID INT NOT NULL
,ORDER_ID INT NOT NULL
,SHIPMENT_DATE DATE NOT NULL
CONSTRAINT SHIPMENT_ID_PK PRIMARY KEY (SHIPMENT_ID)
,CONSTRAINT SHIPMENTS_PERSON_ID_FK FOREIGN KEY (PERSON_ID) REFERENCES PERSONS(PERSON_ID)
,CONSTRAINT SHIPMENTS_ORDER_ID_FK FOREIGN KEY (ORDER_ID) REFERENCES [ORDER](ORDER_ID)
,CONSTRAINT SHIPMENTS_ADDRESS_ID_FK FOREIGN KEY (ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID)
);
GO

CREATE TABLE PAYMENT_PURCHASE_HISTORY
(
PURCHASE_HISTORY_ID INT IDENTITY(500,1)  NOT NULL
,PERSON_ID INT NOT NULL
,ORDER_ID INT NOT NULL
,LAST_ORDER_DATE DATE NOT NULL
CONSTRAINT PURCHASE_HISTORY_ID_PK PRIMARY KEY (PURCHASE_HISTORY_ID)
,CONSTRAINT HISTORY_PERSON_ID_FK FOREIGN KEY (PERSON_ID) REFERENCES PERSONS(PERSON_ID)
,CONSTRAINT HISTORY_ORDER_ID_FK FOREIGN KEY (ORDER_ID) REFERENCES [ORDER](ORDER_ID)
);
GO
---------------------------------------------------------------------------INDEX SCRIPTS------------------------------------------------------
CREATE NONCLUSTERED INDEX IDX_PERSONS
ON PERSONS (PERSON_ID);

GO

CREATE NONCLUSTERED INDEX IDX_ADDRESS
ON ADDRESS (ADDRESS_ID);

GO

CREATE NONCLUSTERED INDEX IDX_PRODUCT_TYPE
ON PRODUCT (PRODUCT_TYPE_ID);

GO

CREATE NONCLUSTERED INDEX IDX_PRODUCT
ON PRODUCT (PRODUCT_ID);

GO

CREATE NONCLUSTERED INDEX IDX_BANK
ON BANK (BANK_ID);

GO

CREATE NONCLUSTERED INDEX IDX_ORDER
ON [ORDER] (ORDER_ID);

GO

CREATE NONCLUSTERED INDEX IDX_ORDER_LINE
ON ORDER_LINE (ORDER_LINE_ID);

GO

CREATE NONCLUSTERED INDEX IDX_PAYMENT
ON PAYMENT (PAYMENT_ID);

GO

CREATE NONCLUSTERED INDEX IDX_INVOICE
ON INVOICE (INVOICE_ID);

GO

CREATE NONCLUSTERED INDEX IDX_SHIPMENTS
ON SHIPMENTS (SHIPMENT_ID);

GO

CREATE NONCLUSTERED INDEX IDX_PAYMENT_PURCHASE_HISTORY
ON PAYMENT_PURCHASE_HISTORY (PURCHASE_HISTORY_ID);

GO


---------------------------------------------------------------------------VIEW SCRIPTS------------------------------------------------------

CREATE VIEW TOTAL_FARMER_REVENUE AS (
SELECT P.PERSON_NAME , SUM(ISNULL(OL.QUANTITY,0)*ISNULL(OL.COST,0)) AS TOTAL_PRODUCT_SOLD
FROM 
FARMERS F JOIN PERSONS P ON F.PERSON_ID = P.PERSON_ID
LEFT JOIN ORDER_LINE OL ON F.PERSON_ID = OL.PERSON_ID
GROUP BY P.PERSON_NAME
)


GO
CREATE VIEW TOTAL_COST_PRODUCT AS (
SELECT P.PRODUCT_NAME , PP.PRODUCT_TYPE , SUM(ISNULL(OL.QUANTITY,0)*ISNULL(OL.COST,0)) AS TOTAL_PRODUCT_SOLD
FROM 
PRODUCT P LEFT JOIN ORDER_LINE OL ON OL.PRODUCT_ID = P.PRODUCT_ID
JOIN PRODUCT_TYPE PP ON P.PRODUCT_TYPE_ID = PP.PRODUCT_TYPE_ID
GROUP BY P.PRODUCT_NAME , PP.PRODUCT_TYPE
)

GO

CREATE VIEW TOTAL_COST_CUSTOMER AS (
SELECT C.CUSTOMER_TYPE , P.PERSON_TYPE , SUM(ISNULL(O.TOTAL_COST,0)) AS TOTAL_PRODUCT_SOLD
FROM 
CUSTOMERS C JOIN PERSONS P ON C.PERSON_ID = P.PERSON_ID
LEFT JOIN  [ORDER] O ON C.PERSON_ID = O.PERSON_ID
GROUP BY C.CUSTOMER_TYPE , P.PERSON_TYPE 
)
GO
---------------------------------------------------------------------------USER DEFINED FUNCTION SCRIPTS------------------------------------------------------

CREATE FUNCTION CALCULATE_TOTAL_COST (@ORDER INT)
RETURNS INT AS

BEGIN
  DECLARE @COST INT;
    SET @COST = (SELECT SUM(COST*QUANTITY) FROM ORDER_LINE WHERE ORDER_ID = @ORDER);
    RETURN @COST
END;

GO

CREATE FUNCTION CALCULATE_TOTAL_QUANTITY (@ORDER INT)
RETURNS INT AS

BEGIN
  DECLARE @QUANTITY INT;
    SET @QUANTITY = (SELECT SUM(QUANTITY) FROM ORDER_LINE WHERE ORDER_ID = @ORDER);
    RETURN @QUANTITY
END;
GO



---------------------------------------------------------------------------PROCEDURE GOVERNMENT SCRIPTS------------------------------------------------------

CREATE OR ALTER VIEW TOTAL_COST_CUSTOMER AS (
SELECT C.CUSTOMER_TYPE , P.PERSON_TYPE , SUM(ISNULL(O.TOTAL_COST,0)) AS TOTAL_PRODUCT_SOLD
FROM 
CUSTOMERS C JOIN PERSONS P ON C.PERSON_ID = P.PERSON_ID
LEFT JOIN  [ORDER] O ON C.PERSON_ID = O.PERSON_ID
GROUP BY C.CUSTOMER_TYPE , P.PERSON_TYPEÂ 
);

GO

CREATE OR ALTER PROCEDURE GOVT_LOGIN AS 
BEGIN
	PRINT 'Kindly run:';
	PRINT 'EXECUTE GOVT_HOME USER_NAME ,PASSWORD';
END;

GO

CREATE OR ALTER PROCEDURE GOVT_HOME @USER_NAME VARCHAR(100) ,@PASSWORD VARCHAR(100) AS 
DECLARE @PERSON INT;
BEGIN
	SET @PERSON = (SELECT PP.PERSON_ID FROM PERSONS PP JOIN CUSTOMERS CC ON PP.PERSON_ID = CC.PERSON_ID WHERE PP.USER_NAME = @USER_NAME AND PP.PASSWORD = @PASSWORD AND PP.PERSON_TYPE = 'CUSTOMER' AND CC.CUSTOMER_TYPE = 'Government');
	IF ISNULL(@PERSON,0) = 0
	BEGIN
		PRINT 'Username or Password is incorrect';
	END
	ELSE BEGIN
		PRINT 'Kindly Execute any of the following reports:';
		PRINT 'To View Revenue by Farmer: EXECUTE VIEW_REV_FARMER USER_NAME ,PASSWORD' ;
		PRINT 'To View Revenue by Product: EXECUTE VIEW_REV_PRODUCT USER_NAME ,PASSWORD';
		PRINT 'To View Revenue by Customer Type: EXECUTE VIEW_REV_CUST_TYPE USER_NAME ,PASSWORD';
		PRINT 'To View Product Price Range: EXECUTE VIEW_PRODUCT_RANGE USER_NAME ,PASSWORD';
		PRINT 'To Set Product Price Range: EXECUTE SET_PRODUCT_RANGE USER_NAME ,PASSWORD, PRODUCT_TYPE_ID ,FLOOR_PRICE ,CEILING_PRICE';
		PRINT 'To Add Product Type: EXECUTE ADD_PRODUCT_TYPE USER_NAME ,PASSWORD, PRODUCT_TYPE ,FLOOR_PRICE ,CEILING_PRICE';
	END;
END;

GO

CREATE OR ALTER PROCEDURE VIEW_REV_FARMER @USER_NAME VARCHAR(100) ,@PASSWORD VARCHAR(100) AS 
DECLARE @PERSON INT;
BEGIN
	SET @PERSON = (SELECT PP.PERSON_ID FROM PERSONS PP JOIN CUSTOMERS CC ON PP.PERSON_ID = CC.PERSON_ID WHERE PP.USER_NAME = @USER_NAME AND PP.PASSWORD = @PASSWORD AND PP.PERSON_TYPE = 'CUSTOMER' AND CC.CUSTOMER_TYPE = 'Government');
	IF ISNULL(@PERSON,0) = 0
	BEGIN
		PRINT 'Username or Password is incorrect';
	END
	ELSE BEGIN
		SELECT * FROM TOTAL_FARMER_REVENUE;
	END;
PRINT 'Kindly Execute the following for more options:';
PRINT 'EXECUTE GOVT_HOME USER_NAME ,PASSWORD';
END;

GO

CREATE OR ALTER PROCEDURE VIEW_REV_PRODUCT @USER_NAME VARCHAR(100) ,@PASSWORD VARCHAR(100) AS 
DECLARE @PERSON INT;
BEGIN
	SET @PERSON = (SELECT PP.PERSON_ID FROM PERSONS PP JOIN CUSTOMERS CC ON PP.PERSON_ID = CC.PERSON_ID WHERE PP.USER_NAME = @USER_NAME AND PP.PASSWORD = @PASSWORD AND PP.PERSON_TYPE = 'CUSTOMER' AND CC.CUSTOMER_TYPE = 'Government');
	IF ISNULL(@PERSON,0) = 0
	BEGIN
		PRINT 'Username or Password is incorrect';
	END
	ELSE BEGIN
		SELECT * FROM TOTAL_COST_PRODUCT;
	END;
PRINT 'Kindly Execute the following for more options:';
PRINT 'EXECUTE GOVT_HOME USER_NAME ,PASSWORD';
END;

GO

CREATE OR ALTER PROCEDURE VIEW_REV_CUST_TYPE @USER_NAME VARCHAR(100) ,@PASSWORD VARCHAR(100) AS 
DECLARE @PERSON INT;
BEGIN
	SET @PERSON = (SELECT PP.PERSON_ID FROM PERSONS PP JOIN CUSTOMERS CC ON PP.PERSON_ID = CC.PERSON_ID WHERE PP.USER_NAME = @USER_NAME AND PP.PASSWORD = @PASSWORD AND PP.PERSON_TYPE = 'CUSTOMER' AND CC.CUSTOMER_TYPE = 'Government');
	IF ISNULL(@PERSON,0) = 0
	BEGIN
		PRINT 'Username or Password is incorrect';
	END
	ELSE BEGIN
		SELECT * FROM TOTAL_COST_CUSTOMER;
	END;
PRINT 'Kindly Execute the following for more options:';
PRINT 'EXECUTE GOVT_HOME USER_NAME ,PASSWORD';
END;

GO

CREATE OR ALTER PROCEDURE VIEW_PRODUCT_RANGE @USER_NAME VARCHAR(100) ,@PASSWORD VARCHAR(100) AS 
DECLARE @PERSON INT;
BEGIN
	SET @PERSON = (SELECT PP.PERSON_ID FROM PERSONS PP JOIN CUSTOMERS CC ON PP.PERSON_ID = CC.PERSON_ID WHERE PP.USER_NAME = @USER_NAME AND PP.PASSWORD = @PASSWORD AND PP.PERSON_TYPE = 'CUSTOMER' AND CC.CUSTOMER_TYPE = 'Government');
	IF ISNULL(@PERSON,0) = 0
	BEGIN
		PRINT 'Username or Password is incorrect';
	END
	ELSE BEGIN
		SELECT *
		FROM PRODUCT_TYPE;
	END;
PRINT 'Kindly Execute the following for more options:';
PRINT 'EXECUTE GOVT_HOME USER_NAME ,PASSWORD';
END;

GO

CREATE OR ALTER PROCEDURE SET_PRODUCT_RANGE @USER_NAME VARCHAR(100) ,@PASSWORD VARCHAR(100) ,@PRODUCT_TYPE_ID INT ,@FLOOR_PRICE INT ,@CEILING_PRICE INT AS 
DECLARE @PERSON INT;
BEGIN
	SET @PERSON = (SELECT PP.PERSON_ID FROM PERSONS PP JOIN CUSTOMERS CC ON PP.PERSON_ID = CC.PERSON_ID WHERE PP.USER_NAME = @USER_NAME AND PP.PASSWORD = @PASSWORD AND PP.PERSON_TYPE = 'CUSTOMER' AND CC.CUSTOMER_TYPE = 'Government');
	IF ISNULL(@PERSON,0) = 0
	BEGIN
		PRINT 'Username or Password is incorrect';
	END
	ELSE BEGIN
		UPDATE PRODUCT_TYPE
		SET FLOOR_PRICE = @FLOOR_PRICE ,CEILING_PRICE = @CEILING_PRICE
		WHERE PRODUCT_TYPE_ID = @PRODUCT_TYPE_ID;
		SELECT *
		FROM PRODUCT_TYPE;
	END;
PRINT 'Kindly Execute the following for more options:';
PRINT 'EXECUTE GOVT_HOME USER_NAME ,PASSWORD';
END;

GO

CREATE OR ALTER PROCEDURE ADD_PRODUCT_TYPE @USER_NAME VARCHAR(100) ,@PASSWORD VARCHAR(100) ,@PRODUCT_TYPE VARCHAR(100) ,@FLOOR_PRICE INT ,@CEILING_PRICE INT AS 
DECLARE @PERSON INT;
BEGIN
	SET @PERSON = (SELECT PP.PERSON_ID FROM PERSONS PP JOIN CUSTOMERS CC ON PP.PERSON_ID = CC.PERSON_ID WHERE PP.USER_NAME = @USER_NAME AND PP.PASSWORD = @PASSWORD AND PP.PERSON_TYPE = 'CUSTOMER' AND CC.CUSTOMER_TYPE = 'Government');
	IF ISNULL(@PERSON,0) = 0
	BEGIN
		PRINT 'Username or Password is incorrect';
	END
	ELSE IF (@PRODUCT_TYPE IN (SELECT PRODUCT_TYPE FROM PRODUCT_TYPE))
		PRINT 'Product Already Exists!'
	ELSE BEGIN
		INSERT INTO PRODUCT_TYPE(PRODUCT_TYPE, FLOOR_PRICE, CEILING_PRICE) VALUES (@PRODUCT_TYPE,@FLOOR_PRICE,@CEILING_PRICE);
		SELECT *
		FROM PRODUCT_TYPE;
	END;
PRINT 'Kindly Execute the following for more options:';
PRINT 'EXECUTE GOVT_HOME USER_NAME ,PASSWORD';
END;

GO

--Uncomment the code below to run the above procedure example

/*
EXECUTE GOVT_LOGIN;

EXECUTE GOVT_HOME 'central@gov.us' ,'Secrecy@top2021';

EXECUTE VIEW_REV_FARMER 'central@gov.us' ,'Secrecy@top2021';

EXECUTE VIEW_REV_PRODUCT 'central@gov.us' ,'Secrecy@top2021';

EXECUTE VIEW_REV_CUST_TYPE 'central@gov.us' ,'Secrecy@top2021';

EXECUTE VIEW_PRODUCT_RANGE 'central@gov.us' ,'Secrecy@top2021';

EXECUTE SET_PRODUCT_RANGE 'central@gov.us' ,'Secrecy@top2021' ,1000 ,20 ,80;

EXECUTE ADD_PRODUCT_TYPE 'central@gov.us' ,'Secrecy@top2021' ,'Grains' ,5 ,30;
*/

---------------------------------------------------------------------------PROCEDURE FARMER SCRIPTS------------------------------------------------------

CREATE OR ALTER PROCEDURE FARMER_LOGIN AS 
BEGIN
	PRINT 'Kindly run:';
	PRINT 'EXECUTE FARMER_HOME USER_NAME ,PASSWORD';
END;

GO

CREATE OR ALTER PROCEDURE FARMER_HOME @USER_NAME VARCHAR(100) ,@PASSWORD VARCHAR(100) AS 
DECLARE @PERSON INT;
BEGIN
	OPEN SYMMETRIC KEY PersonPasswords_Key  
	DECRYPTION BY CERTIFICATE PasswordEncrypt; 
	SET @PERSON = (SELECT PERSON_ID FROM PERSONS PP WHERE PP.USER_NAME = @USER_NAME AND CONVERT(varchar, DecryptByKey(PP.PASSWORD)) = @PASSWORD AND PP.PERSON_TYPE = 'FARMER');
	IF ISNULL(@PERSON,0) = 0
	BEGIN
		PRINT 'Username or Password is incorrect';
	END
	ELSE BEGIN
		SELECT pro.PRODUCT_ID, pro.PRODUCT_NAME,pro.PRODUCT_TYPE_ID,pro.PRODUCT_PRICE,pro.PH_SCALE,pro.FERTILIZER
		FROM PRODUCT pro
		WHERE pro.PERSON_ID = @PERSON;
		SELECT *
		FROM PRODUCT_TYPE;
		PRINT 'Kindly Execute the following for more options:';
		PRINT 'EXECUTE FARMER_OPTIONS USER_NAME ,PASSWORD';
	END;
END;

GO


CREATE OR ALTER PROCEDURE FARMER_OPTIONS @USER_NAME VARCHAR(100) ,@PASSWORD VARCHAR(100) AS 
DECLARE @PERSON INT;
BEGIN
	OPEN SYMMETRIC KEY PersonPasswords_Key  
	DECRYPTION BY CERTIFICATE PasswordEncrypt; 
	SET @PERSON = (SELECT PERSON_ID FROM PERSONS PP WHERE PP.USER_NAME = @USER_NAME AND CONVERT(varchar, DecryptByKey(PP.PASSWORD)) = @PASSWORD AND PP.PERSON_TYPE = 'FARMER');
	IF ISNULL(@PERSON,0) = 0
	BEGIN
		PRINT 'Username or Password is incorrect';
	END
	ELSE BEGIN
		PRINT 'Add Product: EXECUTE ADD_PRODUCT USER_NAME ,PASSWORD, PRODUCT_NAME, PRODUCT_TYPE_ID, PRODUCT_PRICE, FERTILIZER, PH_SCALE' ;
		PRINT 'Update Product Price: EXECUTE UPDATE_PRODUCT_PRICE USER_NAME ,PASSWORD, PRODUCT_ID, PRODUCT_PRICE';
		PRINT 'Update Product Fertilizer: EXECUTE UPDATE_PRODUCT_FERTILIZER USER_NAME ,PASSWORD, PRODUCT_ID, FERTILIZER';
		PRINT 'Update Product pH Scale: EXECUTE UPDATE_PRODUCT_PHSCALE USER_NAME ,PASSWORD, PRODUCT_ID, PH_SCALE';
		PRINT 'Delete Product: EXECUTE DELETE_PRODUCT USER_NAME ,PASSWORD, PRODUCT_ID';
	END;
END;

GO

CREATE OR ALTER PROCEDURE ADD_PRODUCT @USER_NAME VARCHAR(100) ,@PASSWORD VARCHAR(100) ,@PRODUCT_NAME VARCHAR(100),@PRODUCT_TYPE_ID INT ,@PRODUCT_PRICE NUMERIC(20,2) ,@FERTILIZER VARCHAR(100) ,@PH_SCALE NUMERIC(2) AS 
DECLARE @PERSON INT
,@PRODUCTNAME VARCHAR(100)
,@PRODUCTTYPEID VARCHAR(100) 
,@PRODUCTPRICE NUMERIC(20,2) 
,@FERTILIZERTYPE VARCHAR(100) 
,@PHSCALE NUMERIC(2)
,@CEILINGPRICE INT
,@FLOORPRICE INT;
BEGIN
	OPEN SYMMETRIC KEY PersonPasswords_Key  
	DECRYPTION BY CERTIFICATE PasswordEncrypt; 
	SET @PERSON = (SELECT PERSON_ID FROM PERSONS PP WHERE PP.USER_NAME = @USER_NAME AND CONVERT(varchar, DecryptByKey(PP.PASSWORD)) = @PASSWORD AND PP.PERSON_TYPE = 'FARMER');
	IF ISNULL(@PERSON,0) = 0
		BEGIN
			PRINT 'Username or Password is incorrect';
		END
	ELSE BEGIN
		SELECT @PRODUCTNAME = pro.PRODUCT_NAME, @PRODUCTTYPEID = pro.PRODUCT_TYPE_ID, @PRODUCTPRICE = pro.PRODUCT_PRICE, @FERTILIZERTYPE = pro.FERTILIZER, @PHSCALE = pro.PH_SCALE
		FROM PRODUCT pro
		WHERE pro.PERSON_ID = @PERSON;
		SELECT @FLOORPRICE = pt.FLOOR_PRICE,@CEILINGPRICE = pt.CEILING_PRICE
		FROM PRODUCT_TYPE pt
		WHERE pt.PRODUCT_TYPE_ID = @PRODUCT_TYPE_ID;
		IF (@PRODUCTNAME = @PRODUCT_NAME AND @PRODUCTTYPEID = @PRODUCT_TYPE_ID AND @PRODUCTPRICE = @PRODUCT_PRICE AND @FERTILIZERTYPE = @FERTILIZER AND @PHSCALE = @PH_SCALE)
			PRINT 'Product already exists!';
		ELSE IF (@PRODUCT_PRICE NOT BETWEEN @FLOORPRICE AND @CEILINGPRICE)
			PRINT 'Price entered does not fall between the Government specified price range';
		ELSE IF (@PRODUCT_TYPE_ID NOT IN (SELECT PRODUCT_TYPE_ID FROM PRODUCT_TYPE))
			PRINT 'Product does not exists!'
		ELSE BEGIN
			INSERT INTO PRODUCT (PERSON_ID, PRODUCT_NAME, PRODUCT_TYPE_ID, PRODUCT_PRICE, FERTILIZER, PH_SCALE) VALUES (@PERSON,@PRODUCT_NAME,@PRODUCT_TYPE_ID,@PRODUCT_PRICE,@FERTILIZER,@PH_SCALE);
			SELECT pro.PRODUCT_ID, pro.PRODUCT_NAME,pro.PRODUCT_TYPE_ID,pro.PRODUCT_PRICE,pro.PH_SCALE,pro.FERTILIZER
			FROM PRODUCT pro
			WHERE pro.PERSON_ID = @PERSON;
			; 
		END;
	END;
	PRINT 'Kindly Execute the following for more options:';
	PRINT 'EXECUTE FARMER_OPTIONS USER_NAME ,PASSWORD';
END;

GO

CREATE OR ALTER PROCEDURE DELETE_PRODUCT @USER_NAME VARCHAR(100) ,@PASSWORD VARCHAR(100) ,@PRODUCT_ID INT AS 
DECLARE @PERSON INT;
BEGIN
	OPEN SYMMETRIC KEY PersonPasswords_Key  
	DECRYPTION BY CERTIFICATE PasswordEncrypt; 
	SET @PERSON = (SELECT PERSON_ID FROM PERSONS PP WHERE PP.USER_NAME = @USER_NAME AND CONVERT(varchar, DecryptByKey(PP.PASSWORD)) = @PASSWORD AND PP.PERSON_TYPE = 'FARMER');
	IF ISNULL(@PERSON,0) = 0
		BEGIN
			PRINT 'Username or Password is incorrect';
		END
	ELSE BEGIN
		IF (@PRODUCT_ID NOT IN (SELECT pro.PRODUCT_ID
			FROM PRODUCT pro
			WHERE pro.PERSON_ID = @PERSON))
			PRINT 'Product does not exist!';
		ELSE BEGIN
			DELETE 
			FROM PRODUCT 
			WHERE PRODUCT_ID = @PRODUCT_ID
			AND PERSON_ID = @PERSON;
			SELECT pro.PRODUCT_ID, pro.PRODUCT_NAME,pro.PRODUCT_TYPE_ID,pro.PRODUCT_PRICE,pro.PH_SCALE,pro.FERTILIZER
			FROM PRODUCT pro
			WHERE pro.PERSON_ID = @PERSON;
		END;
	END;
	PRINT 'Kindly Execute the following for more options:';
	PRINT 'EXECUTE FARMER_OPTIONS USER_NAME ,PASSWORD';
END;

GO

CREATE OR ALTER PROCEDURE UPDATE_PRODUCT_PRICE @USER_NAME VARCHAR(100) ,@PASSWORD VARCHAR(100) ,@PRODUCT_ID INT, @PRODUCT_PRICE INT AS 
DECLARE @PERSON INT
,@CEILINGPRICE INT
,@FLOORPRICE INT;
BEGIN
	OPEN SYMMETRIC KEY PersonPasswords_Key  
	DECRYPTION BY CERTIFICATE PasswordEncrypt; 
	SET @PERSON = (SELECT PERSON_ID FROM PERSONS PP WHERE PP.USER_NAME = @USER_NAME AND CONVERT(varchar, DecryptByKey(PP.PASSWORD)) = @PASSWORD AND PP.PERSON_TYPE = 'FARMER');
	SET @FLOORPRICE = (SELECT pt.FLOOR_PRICE FROM PRODUCT pro JOIN PRODUCT_TYPE pt ON pro.PRODUCT_TYPE_ID = pt.PRODUCT_TYPE_ID WHERE pro.PRODUCT_ID = @PRODUCT_ID);
	SET @CEILINGPRICE = (SELECT pt.CEILING_PRICE FROM PRODUCT pro JOIN PRODUCT_TYPE pt ON pro.PRODUCT_TYPE_ID = pt.PRODUCT_TYPE_ID WHERE pro.PRODUCT_ID = @PRODUCT_ID);
	IF ISNULL(@PERSON,0) = 0
		BEGIN
			PRINT 'Username or Password is incorrect';
		END
	ELSE BEGIN
		IF (@PRODUCT_ID NOT IN (SELECT pro.PRODUCT_ID
			FROM PRODUCT pro
			WHERE pro.PERSON_ID = @PERSON))
				PRINT 'Product does not exist!';
		ELSE IF (@PRODUCT_PRICE NOT BETWEEN @FLOORPRICE AND @CEILINGPRICE)
			PRINT 'Price entered does not fall between the Government specified price range';
		ELSE BEGIN
			UPDATE PRODUCT
			SET PRODUCT_PRICE = @PRODUCT_PRICE
			WHERE PRODUCT_ID = @PRODUCT_ID
			AND PERSON_ID = @PERSON;
			SELECT pro.PRODUCT_ID, pro.PRODUCT_NAME,pro.PRODUCT_TYPE_ID,pro.PRODUCT_PRICE,pro.PH_SCALE,pro.FERTILIZER
			FROM PRODUCT pro
			WHERE pro.PERSON_ID = @PERSON;
		END;
	END;
	PRINT 'Kindly Execute the following for more options:';
	PRINT 'EXECUTE FARMER_OPTIONS USER_NAME ,PASSWORD';
END;

GO

CREATE OR ALTER PROCEDURE UPDATE_PRODUCT_FERTILIZER @USER_NAME VARCHAR(100) ,@PASSWORD VARCHAR(100) ,@PRODUCT_ID INT, @FERTILIZER VARCHAR(100) AS 
DECLARE @PERSON INT;
BEGIN
	OPEN SYMMETRIC KEY PersonPasswords_Key  
	DECRYPTION BY CERTIFICATE PasswordEncrypt; 
	SET @PERSON = (SELECT PERSON_ID FROM PERSONS PP WHERE PP.USER_NAME = @USER_NAME AND CONVERT(varchar, DecryptByKey(PP.PASSWORD)) = @PASSWORD AND PP.PERSON_TYPE = 'FARMER');
	IF ISNULL(@PERSON,0) = 0
		BEGIN
			PRINT 'Username or Password is incorrect';
		END
	ELSE BEGIN
		IF (@PRODUCT_ID NOT IN (SELECT pro.PRODUCT_ID
			FROM PRODUCT pro
			WHERE pro.PERSON_ID = @PERSON))
			PRINT 'Product does not exist!';
		ELSE BEGIN
			UPDATE PRODUCT
			SET FERTILIZER = @FERTILIZER
			WHERE PRODUCT_ID = @PRODUCT_ID
			AND PERSON_ID = @PERSON;
			SELECT pro.PRODUCT_ID, pro.PRODUCT_NAME,pro.PRODUCT_TYPE_ID,pro.PRODUCT_PRICE,pro.PH_SCALE,pro.FERTILIZER
			FROM PRODUCT pro
			WHERE pro.PERSON_ID = @PERSON;
		END;
	END;
	PRINT 'Kindly Execute the following for more options:';
	PRINT 'EXECUTE FARMER_OPTIONS USER_NAME ,PASSWORD';
END;

GO

CREATE OR ALTER PROCEDURE UPDATE_PRODUCT_PHSCALE @USER_NAME VARCHAR(100) ,@PASSWORD VARCHAR(100) ,@PRODUCT_ID INT, @PH_SCLAE VARCHAR(100) AS 
DECLARE @PERSON INT;
BEGIN
	OPEN SYMMETRIC KEY PersonPasswords_Key  
	DECRYPTION BY CERTIFICATE PasswordEncrypt; 
	SET @PERSON = (SELECT PERSON_ID FROM PERSONS PP WHERE PP.USER_NAME = @USER_NAME AND CONVERT(varchar, DecryptByKey(PP.PASSWORD)) = @PASSWORD AND PP.PERSON_TYPE = 'FARMER');
	IF ISNULL(@PERSON,0) = 0
		BEGIN
			PRINT 'Username or Password is incorrect';
		END
	ELSE BEGIN
		IF (@PRODUCT_ID NOT IN (SELECT pro.PRODUCT_ID
			FROM PRODUCT pro
			WHERE pro.PERSON_ID = @PERSON))
			PRINT 'Product does not exist!';
		ELSE BEGIN
			UPDATE PRODUCT
			SET PH_SCALE = @PH_SCLAE
			WHERE PRODUCT_ID = @PRODUCT_ID
			AND PERSON_ID = @PERSON;
			SELECT pro.PRODUCT_ID, pro.PRODUCT_NAME,pro.PRODUCT_TYPE_ID,pro.PRODUCT_PRICE,pro.PH_SCALE,pro.FERTILIZER
			FROM PRODUCT pro
			WHERE pro.PERSON_ID = @PERSON;
		END;
	END;
	PRINT 'Kindly Execute the following for more options:';
	PRINT 'EXECUTE FARMER_OPTIONS USER_NAME ,PASSWORD';
END;

GO


--Uncomment the code below to run the above procedure example

/*
EXECUTE FARMER_LOGIN;

DECLARE @PERSONS INT;
EXECUTE FARMER_HOME 'Joseph.nih@google.com', 'Nihil@1245';

EXECUTE FARMER_OPTIONS 'Joseph.nih@google.com', 'Nihil@1245';

EXECUTE ADD_PRODUCT 'Joseph.nih@google.com', 'Nihil@1245','Mango',1000,150,'Manure',7;

EXECUTE DELETE_PRODUCT 'Joseph.nih@google.com', 'Nihil@1245', 910;

EXECUTE UPDATE_PRODUCT_PRICE 'Joseph.nih@google.com', 'Nihil@1245', 911, 200;

EXECUTE UPDATE_PRODUCT_FERTILIZER 'Joseph.nih@google.com', 'Nihil@1245', 911, 'Compost';

EXECUTE UPDATE_PRODUCT_PHSCALE 'Joseph.nih@google.com', 'Nihil@1245', 911, 8;
*/


---------------------------------------------------------------------------PROCEDURE CUSTOMER SCRIPTS------------------------------------------------------


CREATE PROCEDURE DISPLAY_PRODUCT
AS
BEGIN
SELECT P.PERSON_NAME FARMERS, P1.PRODUCT_ID, P1.PRODUCT_NAME , P2.PRODUCT_TYPE, P1.PRODUCT_PRICE
FROM
PERSONS P JOIN  FARMERS F ON P.PERSON_ID = F.PERSON_ID
JOIN  PRODUCT P1 ON F.PERSON_ID = P1.PERSON_ID
JOIN PRODUCT_TYPE P2 ON P2.PRODUCT_TYPE_ID = P1.PRODUCT_TYPE_ID
ORDER BY P1.PRODUCT_NAME , P1.PRODUCT_PRICE
PRINT 'Please type the following : DECLARE @ORDERID1 int '
PRINT 'EXECUTE ORDER_PRODUCTS USER_NAME,PASSWORD,PRODUCT_ID,QUANTITY,@ORDERID1 OUTPUT';
END

GO

CREATE OR ALTER PROCEDURE ORDER_PRODUCTS @USER_NAME VARCHAR(100) ,@PASSWORD VARCHAR(100), @PRODUCT_ID INT , @QUANTITY INT ,@ORDERID INT OUTPUT AS 
DECLARE @PERSON INT
,@PRODUCT_NAME INT
,@COST INT
,@STATUS VARCHAR(30)
,@ORDER INT
,@FARMER INT
,@ORDERED_PERSON INT;
BEGIN
OPEN SYMMETRIC KEY PERSONPASSWORDS_KEY  
DECRYPTION BY CERTIFICATE PASSWORDENCRYPT;
SET @PERSON = (SELECT PERSON_ID FROM PERSONS PP WHERE PP.USER_NAME = @USER_NAME AND CONVERT(VARCHAR, DECRYPTBYKEY(PP.PASSWORD)) = @PASSWORD AND PP.PERSON_TYPE = 'CUSTOMER');
SET @ORDERED_PERSON = (SELECT PERSON_ID FROM [ORDER] WHERE PERSON_ID = @PERSON AND ORDER_STATUS = 'IN-PROGRESS');
--SET @COST = (SELECT (PRODUCT_PRICE*@QUANTITY) FROM PRODUCT PP WHERE PP.PRODUCT_ID = @PRODUCT_ID);
IF ISNULL(@PERSON,0) = 0
BEGIN
PRINT 'Username or Password is incorrect';
END
ELSE IF ISNULL(@ORDERED_PERSON,0) != 0 
BEGIN
--INSERT INTO [ORDER] (PERSON_ID,TOTAL_QUANTITY,TOTAL_COST,PLACE_ORDER) VALUES(@PERSON,0,0,'In-progress');
(SELECT @COST = PRODUCT_PRICE , @FARMER = PERSON_ID FROM PRODUCT PP WHERE PP.PRODUCT_ID = @PRODUCT_ID);
SET @ORDER = (SELECT (ORDER_ID) FROM [ORDER] PP WHERE PP.PERSON_ID = @ORDERED_PERSON AND ORDER_STATUS = 'In-progress');
INSERT INTO ORDER_LINE (ORDER_ID,PERSON_ID,PRODUCT_ID,COST,QUANTITY,ORDER_DATE) VALUES(@ORDER,@FARMER,@PRODUCT_ID,@COST,@QUANTITY,GETDATE());
SELECT  @COST = (DBO.CALCULATE_TOTAL_COST (@ORDER)) ;
SELECT  @QUANTITY = (DBO.CALCULATE_TOTAL_QUANTITY (@ORDER)) ;
UPDATE [ORDER]
SET TOTAL_COST = @COST, TOTAL_QUANTITY = @QUANTITY
WHERE ORDER_ID = @ORDER;
PRINT 'Your order number is '+ + cast(@ORDER as char);
PRINT 'Please type the following : DECLARE @ORDERID1 int '
PRINT 'EXECUTE ORDER_PRODUCTS USER_NAME,PASSWORD,PRODUCT_ID,QUANTITY,@ORDERID1 OUTPUT';
PRINT 'OR'
PRINT 'To confirm the order Please type the following: DECLARE @ORDERID1 int '
PRINT 'EXECUTE ORDER_CONFIRM USER_NAME,PASSWORD,ORDER_ID,@ORDERID1 OUTPUT';
END

ELSE BEGIN
INSERT INTO [ORDER] (PERSON_ID,TOTAL_QUANTITY,TOTAL_COST,ORDER_STATUS) VALUES(@PERSON,0,0,'In-progress');
(SELECT @COST = PRODUCT_PRICE , @FARMER = PERSON_ID FROM PRODUCT PP WHERE PP.PRODUCT_ID = @PRODUCT_ID);
SET @ORDER = (SELECT (ORDER_ID) FROM [ORDER] PP WHERE PP.PERSON_ID = @PERSON AND ORDER_STATUS = 'In-progress');
INSERT INTO ORDER_LINE (ORDER_ID,PERSON_ID,PRODUCT_ID,COST,QUANTITY,ORDER_DATE) VALUES(@ORDER,@FARMER,@PRODUCT_ID,@COST,@QUANTITY,GETDATE());
SELECT  @COST = (DBO.CALCULATE_TOTAL_COST (@ORDER)) ;
SELECT  @QUANTITY = (DBO.CALCULATE_TOTAL_QUANTITY (@ORDER)) ;
UPDATE [ORDER]
SET TOTAL_COST = @COST, TOTAL_QUANTITY = @QUANTITY
WHERE ORDER_ID = @ORDER;
END
SET @ORDERID = @ORDER;
PRINT 'Your order number is '+ + cast(@ORDER as char);
PRINT 'Please type the following: DECLARE @ORDERID1 int '
PRINT 'EXECUTE ORDER_PRODUCTS USER_NAME,PASSWORD,PRODUCT_ID,QUANTITY,@ORDERID1 OUTPUT';
PRINT 'OR'
PRINT 'To confirm the order Please type the following: DECLARE @ORDERID1 int '
PRINT 'EXECUTE ORDER_CONFIRM USER_NAME,PASSWORD,ORDER_ID,@ORDERID1 OUTPUT';
--PRINT 'TO CONFIRM THE ORDER: EXECUTE ORDER_CONFIRM USER_NAME,PASSWORD,ORDER_ID';
END

GO
CREATE OR ALTER PROCEDURE ORDER_CONFIRM @USER_NAME VARCHAR(100) ,@PASSWORD VARCHAR(100), @ORDER INT , @PLACE_ORDER CHAR(100) , @ORDERID INT OUTPUT AS
DECLARE @PERSON INT
,@PRODUCT_NAME INT
,@COST INT
,@STATUS VARCHAR(30)
,@INVOICE_AMOUNT INT
,@BANK_ID INT
,@ADDRESS INT
,@DATE DATE
,@ORDER_STATUS VARCHAR(30);
BEGIN
OPEN SYMMETRIC KEY PERSONPASSWORDS_KEY  
DECRYPTION BY CERTIFICATE PASSWORDENCRYPT;
SET @PERSON = (SELECT PERSON_ID FROM PERSONS PP WHERE PP.USER_NAME = @USER_NAME AND CONVERT(VARCHAR, DECRYPTBYKEY(PP.PASSWORD)) = @PASSWORD AND PP.PERSON_TYPE = 'CUSTOMER');
SET @BANK_ID = (SELECT BANK_ID FROM BANK WHERE PERSON_ID = @PERSON);
SET @ORDER_STATUS = (SELECT ORDER_STATUS FROM [ORDER] WHERE ORDER_ID = @ORDER and PERSON_ID = @PERSON);
IF ISNULL(@PERSON,0) = 0
BEGIN
PRINT 'Username or Password is incorrect';
END
ELSE IF (UPPER(@PLACE_ORDER) = 'CONFIRM')
BEGIN
IF (@ORDER_STATUS = 'IN-PROGRESS') AND @BANK_ID !=0
BEGIN
UPDATE [ORDER]
SET ORDER_STATUS = 'SUCCESS'
WHERE ORDER_ID = @ORDER;
PRINT 'The order is confirmed your order number is '+ + cast(@ORDER as char);
PRINT 'Please type the following to make the payment: DECLARE @ORDERID1 int '
PRINT 'EXECUTE PAY_ORDER USER_NAME , PASSWORD , ORDERID,@ORDERID1 OUTPUT;';
SET @ORDERID = @ORDER;
END
ELSE IF @BANK_ID = 0
BEGIN
PRINT 'Bank id is blank'
END
ELSE 
BEGIN
PRINT 'Order is already confirmed'
END
END
ELSE 
BEGIN
PRINT 'Order is already confirmed'
END
END


GO
CREATE OR ALTER PROCEDURE PAY_ORDER @USER_NAME VARCHAR(100) ,@PASSWORD VARCHAR(100), @ORDER INT ,@PAYID INT OUTPUT AS
DECLARE @PERSON INT
,@PRODUCT_NAME INT
,@COST INT
,@STATUS VARCHAR(30)
,@INVOICE_AMOUNT INT
,@BANK_ID INT
,@ADDRESS INT
,@DATE DATE
,@ORDER_STATUS VARCHAR(30)
,@CHECK_PAY INT
,@SHIPMENT_DATE DATE
,@SHIPMENT INT;
BEGIN
OPEN SYMMETRIC KEY PERSONPASSWORDS_KEY  
DECRYPTION BY CERTIFICATE PASSWORDENCRYPT;
SET @PERSON = (SELECT PERSON_ID FROM PERSONS PP WHERE PP.USER_NAME = @USER_NAME AND CONVERT(VARCHAR, DECRYPTBYKEY(PP.PASSWORD)) = @PASSWORD AND PP.PERSON_TYPE = 'CUSTOMER');
SET @BANK_ID = (SELECT BANK_ID FROM BANK WHERE PERSON_ID = @PERSON);
SET @ORDER_STATUS = (SELECT ORDER_STATUS FROM [ORDER] WHERE ORDER_ID = @ORDER);
SET @CHECK_PAY = (SELECT PAYMENT_ID FROM PAYMENT WHERE ORDER_ID = @ORDER);
IF ISNULL(@PERSON,0) = 0
BEGIN
PRINT 'Username or Password is incorrect';
END
ELSE IF (ISNULL(@CHECK_PAY,0) = 0 AND @ORDER_STATUS = 'SUCCESS' AND ISNULL(@BANK_ID,0)<>0)
  BEGIN
    INSERT INTO PAYMENT (ORDER_ID,BANK_ID,PAYMENT_DATE) VALUES(@ORDER,@BANK_ID,GETDATE());
    SET @INVOICE_AMOUNT = (SELECT TOTAL_COST FROM [ORDER] WHERE ORDER_ID = @ORDER);
    INSERT INTO INVOICE (ORDER_ID,INVOICE_AMOUNT,PAYMENT_STATUS) VALUES(@ORDER,@INVOICE_AMOUNT,'SUCCESS');
    SET @ADDRESS = (SELECT ADDRESS_ID FROM PERSONS WHERE PERSON_ID = @PERSON);
    INSERT INTO SHIPMENTS(PERSON_ID,ADDRESS_ID,ORDER_ID,SHIPMENT_DATE) VALUES(@PERSON,@ADDRESS,@ORDER,GETDATE()+1);
    SET @DATE = (SELECT MAX(ORDER_UPDATE_DATE) FROM ORDER_AUDIT WHERE PERSON_ID = @PERSON AND ORDER_STATUS = 'IN-PROGRESS');
    INSERT INTO PAYMENT_PURCHASE_HISTORY(PERSON_ID,ORDER_ID,LAST_ORDER_DATE) VALUES(@PERSON,@ORDER,@DATE);
    SELECT @SHIPMENT= SHIPMENT_ID, @SHIPMENT_DATE = SHIPMENT_DATE FROM SHIPMENTS WHERE ORDER_ID = @ORDER;
    SET @PAYID = (SELECT PAYMENT_ID FROM PAYMENT WHERE ORDER_ID = @ORDER);
    PRINT 'The payment is done the payment number is'+ + cast(@PAYID as char);
    PRINT 'The order will be shiped on '+ + cast(@SHIPMENT_DATE as CHAR) + +'the shipment number is ' ++ cast(@SHIPMENT as char);
    
  END
ELSE 
  BEGIN
    PRINT 'Please confirm the order to make the payment or the order id is incorrect';
  END
END

GO

----EXECUTE SCRIPTS FOR CUSTOMER PROCEDURE----
/* USE FARMER_PORTAL
GO
DECLARE @ORDERID1 int
EXECUTE ORDER_PRODUCTS 'Singh.par@google.com' ,'Coolbouy_465',901,10 ,@ORDERID1 OUTPUT

GO
USE FARMER_PORTAL
GO
DECLARE @ORDERID1 int
EXECUTE ORDER_PRODUCTS 'Singh.par@google.com' ,'Coolbouy_465',902,11 ,@ORDERID1 OUTPUT

GO
USE FARMER_PORTAL
GO
DECLARE @ORDERID1 int
EXECUTE ORDER_PRODUCTS 'Singh.par@google.com' ,'Coolbouy_465',903,12 ,@ORDERID1 OUTPUT

GO
USE FARMER_PORTAL
GO
DECLARE @ORDERID1 int
EXECUTE ORDER_PRODUCTS 'Singh.par@google.com' ,'Coolbouy_465',904,13 ,@ORDERID1 OUTPUT

GO
USE FARMER_PORTAL
GO
DECLARE @ORDERID1 int
EXECUTE ORDER_PRODUCTS 'Singh.par@google.com' ,'Coolbouy_465',905,14 ,@ORDERID1 OUTPUT

GO
USE FARMER_PORTAL
GO
DECLARE @ORDERID1 int
EXECUTE ORDER_PRODUCTS 'Singh.par@google.com' ,'Coolbouy_465',906,15 ,@ORDERID1 OUTPUT

GO
USE FARMER_PORTAL
GO
DECLARE @ORDERID1 int
EXECUTE ORDER_PRODUCTS 'Singh.par@google.com' ,'Coolbouy_465',907,15 ,@ORDERID1 OUTPUT

GO
USE FARMER_PORTAL
GO
DECLARE @ORDERID1 int
EXECUTE ORDER_PRODUCTS 'Singh.par@google.com' ,'Coolbouy_465',908,18 ,@ORDERID1 OUTPUT

GO
USE FARMER_PORTAL
GO
DECLARE @ORDERID1 int
EXECUTE ORDER_CONFIRM 'Singh.par@google.com' ,'Coolbouy_465',203,'CONFIRM',@ORDERID1 OUTPUT

USE FARMER_PORTAL
GO
DECLARE @ORDERID1 int
EXECUTE PAY_ORDER 'Singh.par@google.com' ,'Coolbouy_465',203,@ORDERID1 OUTPUT */

---------------------------------------------------------------------------TRIGGERS SCRIPTS------------------------------------------------------

CREATE TRIGGER UPDATE_ORDER ON [ORDER]
FOR UPDATE 
AS
 
BEGIN
  INSERT INTO ORDER_AUDIT 
  SELECT ORDER_ID,PERSON_ID , TOTAL_QUANTITY , TOTAL_COST , ORDER_STATUS ,getdate()
  FROM DELETED
END;

GO
---------------------------------------------------------------------------ENCRYPTION SCRIPTS------------------------------------------------------
CREATE MASTER KEY ENCRYPTION BY   
PASSWORD = 'Senpai@271196';  
GO

CREATE CERTIFICATE PasswordEncrypt  
   WITH SUBJECT = 'Person Passwords';  
GO  

CREATE SYMMETRIC KEY PersonPasswords_Key 
    WITH ALGORITHM = AES_256  
    ENCRYPTION BY CERTIFICATE PasswordEncrypt;  
GO  

-- Open the symmetric key with which to encrypt the data.  
OPEN SYMMETRIC KEY PersonPasswords_Key  
   DECRYPTION BY CERTIFICATE PasswordEncrypt;  

-- Encrypt the value in column Password using the  
-- symmetric key PersonPasswords_Key.  
-- Save the result in column Password_Encrypted.    
UPDATE persons set PASSWORD = EncryptByKey(Key_GUID('PersonPasswords_Key'),password);
GO

-- Verify the encryption.  
-- First, open the symmetric key with which to decrypt the data.  
OPEN SYMMETRIC KEY PersonPasswords_Key  
   DECRYPTION BY CERTIFICATE PasswordEncrypt;  
GO  

-- Now list the original passowrd, the encrypted password,  
-- and the decrypted ciphertext. If the decryption worked,  
-- the original password will match the decrypted password.  
SELECT USER_NAME, CONVERT(varchar, DecryptByKey(PASSWORD))   
    AS 'Decrypted password'  
    FROM PERSONS;  
GO